{
  "name": "nyc",
  "version": "11.9.0",
  "description": "the Istanbul command line interface",
  "main": "index.js",
  "scripts": {
    "bundle": "bundle-dependencies update",
    "posttest": "standard",
    "test": "npm run clean && npm run build && npm run instrument && npm run test-integration && npm run test-mocha && npm run report",
    "clean": "rimraf ./.nyc_output ./node_modules/.cache ./.self_coverage ./test/fixtures/.nyc_output ./test/fixtures/node_modules/.cache *covered.js ./lib/*covered.js",
    "build": "node ./build-tests",
    "instrument": "node ./build-self-coverage.js",
    "test-integration": "tap -t120 --no-cov -b ./test/build/*.js && mocha --timeout=15000 ./test/nyc-bin.js",
    "test-mocha": "node ./bin/nyc --no-clean --silent --temp-directory=./.self_coverage mocha ./test/nyc.js ./test/process-args.js",
    "report": "node ./bin/nyc  --temp-directory ./.self_coverage/ -r text -r lcov report",
    "release": "standard-version"
  },
  "bin": {
    "nyc": "./bin/nyc.js"
  },
  "files": [
    "index.js",
    "bin/*.js",
    "lib/*.js",
    "lib/commands/*.js",
    "lib/instrumenters/*.js",
    "!**/*covered.js"
  ],
  "nyc": {
    "exclude": [
      "node_modules",
      "bin",
      "coverage",
      "test/fixtures/coverage.js",
      "test/build/*",
      "test/src/*",
      "test/nyc.js",
      "test/process-args.js",
      "index.covered.js",
      "test/fixtures/_generateCoverage.js"
    ]
  },
  "standard": {
    "ignore": [
      "**/fixtures/**",
      "**/test/build/*"
    ]
  },
  "keywords": [
    "coverage",
    "reporter",
    "subprocess",
    "testing"
  ],
  "contributors": [
    {
      "name": "Isaac Schlueter"
    },
    {
      "name": "Mark Wubben"
    },
    {
      "name": "James Talmage"
    },
    {
      "name": "Krishnan Anantheswaran"
    }
  ],
  "author": {
    "name": "Ben Coe",
    "email": "ben@npmjs.com"
  },
  "license": "ISC",
  "dependencies": {
    "archy": "^1.0.0",
    "arrify": "^1.0.1",
    "caching-transform": "^1.0.0",
    "convert-source-map": "^1.5.1",
    "debug-log": "^1.0.1",
    "default-require-extensions": "^1.0.0",
    "find-cache-dir": "^0.1.1",
    "find-up": "^2.1.0",
    "foreground-child": "^1.5.3",
    "glob": "^7.0.6",
    "istanbul-lib-coverage": "^1.1.2",
    "istanbul-lib-hook": "^1.1.0",
    "istanbul-lib-instrument": "^1.10.0",
    "istanbul-lib-report": "^1.1.3",
    "istanbul-lib-source-maps": "^1.2.3",
    "istanbul-reports": "^1.4.0",
    "md5-hex": "^1.2.0",
    "merge-source-map": "^1.1.0",
    "micromatch": "^3.1.10",
    "mkdirp": "^0.5.0",
    "resolve-from": "^2.0.0",
    "rimraf": "^2.6.2",
    "signal-exit": "^3.0.1",
    "spawn-wrap": "^1.4.2",
    "test-exclude": "^4.2.0",
    "yargs": "11.1.0",
    "yargs-parser": "^8.0.0"
  },
  "devDependencies": {
    "any-path": "^1.3.0",
    "bundle-dependencies": "^1.0.2",
    "chai": "^3.0.0",
    "coveralls": "^3.0.1",
    "exists-sync": "0.0.4",
    "forking-tap": "^0.1.1",
    "is-windows": "^1.0.2",
    "lodash": "^4.17.10",
    "mocha": "^5.1.1",
    "newline-regex": "^0.2.1",
    "requirejs": "^2.3.5",
    "sanitize-filename": "^1.5.3",
    "sinon": "^2.4.1",
    "source-map-support": "^0.5.5",
    "standard": "^9.0.2",
    "standard-version": "^4.3.0",
    "strip-indent": "^2.0.0",
    "tap": "^11.1.5",
    "which": "^1.3.0",
    "zero-fill": "^2.2.3"
  },
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/istanbuljs/nyc.git"
  },
  "readme": "# nyc\n\n[![Build Status](https://travis-ci.org/istanbuljs/nyc.svg?branch=master)](https://travis-ci.org/istanbuljs/nyc)\n[![Coverage Status](https://coveralls.io/repos/bcoe/nyc/badge.svg?branch=)](https://coveralls.io/r/bcoe/nyc?branch=master)\n[![NPM version](https://img.shields.io/npm/v/nyc.svg)](https://www.npmjs.com/package/nyc)\n[![Windows Tests](https://img.shields.io/appveyor/ci/bcoe/nyc-ilw23/master.svg?label=Windows%20Tests)](https://ci.appveyor.com/project/bcoe/nyc-ilw23)\n[![Conventional Commits](https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg)](https://conventionalcommits.org)\n[![community slack](http://devtoolscommunity.herokuapp.com/badge.svg)](http://devtoolscommunity.herokuapp.com)\n\n_Having problems? want to contribute? join our [community slack](http://devtoolscommunity.herokuapp.com)_.\n\nIstanbul's state of the art command line interface, with support for:\n\n* applications that spawn subprocesses.\n* ES2015 transforms, via [babel-plugin-istanbul](https://github.com/istanbuljs/babel-plugin-istanbul), or source-maps.\n\n## Instrumenting your code\n\nYou can install nyc as a development dependency and add it to the test stanza\nin your package.json.\n\n```shell\nnpm i nyc --save-dev\n```\n\n```json\n{\n  \"scripts\": {\n    \"test\": \"nyc mocha\"\n  }\n}\n```\n\nAlternatively, you can install nyc globally and use it to execute `npm test`:\n\n```shell\nnpm i nyc -g\n```\n\n```shell\nnyc npm test\n```\n\nnyc accepts a wide variety of configuration arguments, run `nyc --help` for\nthorough documentation.\n\nConfiguration arguments should be provided prior to the program that nyc\nis executing. As an example, the following command executes `npm test`,\nand indicates to nyc that it should output both an `lcov`\nand a `text-lcov` coverage report.\n\n```shell\nnyc --reporter=lcov --reporter=text-lcov npm test\n```\n\n### Accurate stack traces using source-maps\n\nWhen `produce-source-map` is set to true, then the instrumented source files will\ninclude inline source maps for the instrumenter transform. When combined with\n[source-map-support](https://github.com/evanw/node-source-map-support),\nstack traces for instrumented code will reflect their original lines.\n\n### Support for custom require hooks (babel, typescript, etc.)\n\nnyc supports custom require hooks like\n[`babel-register`](http://babeljs.io/docs/usage/require/). nyc can\nload the hooks for you, [using the `--require`\nflag](#require-additional-modules).\n\nSource maps are used to map coverage information back to the appropriate lines\nof the pre-transpiled code. You'll have to configure your custom require hook\nto inline the source-map in the transpiled code. For Babel that means setting\nthe `sourceMaps` option to `inline`.\n\n### Source-Map support for pre-instrumented codebases\n\nIf you opt to pre-instrument your source-code (rather than using a just-in-time\ntranspiler like [`babel-register`](http://babeljs.io/docs/usage/require/))\nnyc supports both inline source-maps and `.map` files.\n\n_Important: If you are using nyc with a project that pre-instruments its code,\nrun nyc with the configuration option `--exclude-after-remap` set to `false`.\nOtherwise nyc's reports will exclude any files that source-maps remap to folders\ncovered under exclude rules._\n\n## Use with `babel-plugin-istanbul` for Babel Support\n\nWe recommend using [`babel-plugin-istanbul`](https://github.com/istanbuljs/babel-plugin-istanbul) if your\nproject uses the babel tool chain:\n\n1. enable the `babel-plugin-istanbul` plugin:\n\n  ```json\n    {\n      \"babel\": {\n        \"presets\": [\"env\"],\n        \"env\": {\n          \"test\": {\n            \"plugins\": [\"istanbul\"]\n          }\n        }\n      }\n    }\n  ```\n\n  Note: With this configuration, the Istanbul instrumentation will only be active when `NODE_ENV` or `BABEL_ENV` is `test`.\n\n  We recommend using the [`cross-env`](https://npmjs.com/package/cross-env) package to set these environment variables\n  in your `package.json` scripts in a way that works cross-platform.\n\n2. disable nyc's instrumentation and source-maps, e.g. in `package.json`:\n\n  ```json\n  {\n    \"nyc\": {\n      \"require\": [\n        \"babel-register\"\n      ],\n      \"sourceMap\": false,\n      \"instrument\": false\n    },\n    \"scripts\": {\n      \"test\": \"cross-env NODE_ENV=test nyc mocha\"\n    }\n  }\n  ```\n\nThat's all there is to it, better ES2015+ syntax highlighting awaits:\n\n<img width=\"500\" src=\"screen2.png\">\n\n## Support for alternate file extensions (.jsx, .mjs)\n\nSupporting file extensions can be configured through either the configuration arguments or with the `nyc` config section in `package.json`.\n\n```shell\nnyc --extension .jsx --extension .mjs npm test\n```\n\n```json\n{\n  \"nyc\": {\n    \"extension\": [\n      \".jsx\",\n      \".mjs\"\n    ]\n  }\n}\n```\n\n## Checking coverage\n\nnyc can fail tests if coverage falls below a threshold.\nAfter running your tests with nyc, simply run:\n\n```shell\nnyc check-coverage --lines 95 --functions 95 --branches 95\n```\n\nnyc also accepts a `--check-coverage` shorthand, which can be used to\nboth run tests and check that coverage falls within the threshold provided:\n\n```shell\nnyc --check-coverage --lines 100 npm test\n```\n\nThe above check fails if coverage falls below 100%.\n\nTo check thresholds on a per-file basis run:\n\n```shell\nnyc check-coverage --lines 95 --per-file\n```\n\n## Running reports\n\nOnce you've run your tests with nyc, simply run:\n\n```bash\nnyc report\n```\n\nTo view your coverage report:\n\n<img width=\"500\" src=\"screen.png\">\n\nYou can use [any reporters that are supported by `istanbul`](https://github.com/istanbuljs/istanbuljs/tree/master/packages/istanbul-reports/lib): `clover`, `cobertura`, `html`, `json-summary`, `json`, `lcov`, `lcovonly`, `none`, `teamcity`, `text-lcov`, `text-summary`, `text`.\n\n```bash\nnyc report --reporter=lcov\n```\n\nYou can find examples of the output for various reporters [here](https://istanbul.js.org/docs/advanced/alternative-reporters).\n\nYou also have the choice of using a [custom reporter](https://github.com/pedrocarrico/istanbul-reporter-aws-cloudwatch-metrics).\nInstall custom reporters as a development dependency and you can use the `--reporter` flag to load and view them:\n\n```bash\nnyc report --reporter=<custom-reporter-name>\n```\n\n## Excluding files\n\nYou can tell nyc to exclude specific files and directories by adding\nan `nyc.exclude` array to your `package.json`. Each element of\nthe array is a glob pattern indicating which paths should be omitted.\n\nGlobs are matched using [micromatch](https://www.npmjs.com/package/micromatch).\n\nFor example, the following config will exclude any files with the extension `.spec.js`,\nand anything in the `build` directory:\n\n```json\n{\n  \"nyc\": {\n    \"exclude\": [\n      \"**/*.spec.js\",\n      \"build\"\n    ]\n  }\n}\n```\n> Note: Since version 9.0 files under `node_modules/` are excluded by default.\n  add the exclude rule `!**/node_modules/` to stop this.\n\n> Note: exclude defaults to `['coverage/**', 'test/**', 'test{,-*}.js', '**/*.test.js', '**/__tests__/**', '**/node_modules/**']`,\nwhich would exclude `test`/`__tests__` directories as well as `test.js`, `*.test.js`,\nand `test-*.js` files. Specifying your own exclude property overrides these defaults.\n\n## Including files\n\nAs an alternative to providing a list of files to `exclude`, you can provide\nan `include` key with a list of globs to specify specific files that should be covered:\n\n```json\n{\n  \"nyc\": {\n    \"include\": [\"**/build/umd/moment.js\"]\n  }\n}\n```\n\n> `nyc` uses micromatch for glob expansions, you can read its documentation [here](https://www.npmjs.com/package/micromatch).\n\n> Note: include defaults to `['**']`\n\n> ### Use the `--all` flag to include files that have not been required in your tests.\n\n## Require additional modules\n\nThe `--require` flag can be provided to `nyc` to indicate that additional\nmodules should be required in the subprocess collecting coverage:\n\n`nyc --require babel-register --require babel-polyfill mocha`\n\n## Caching\n\nYou can run `nyc` with the optional `--cache` flag, to prevent it from\ninstrumenting the same files multiple times. This can significantly\nimprove runtime performance.\n\n## Configuring `nyc`\n\nAny configuration options that can be set via the command line can also be specified in the `nyc` stanza of your package.json, or within a `.nycrc` file:\n\n**package.json:**\n\n```json\n{\n  \"description\": \"These are just examples for demonstration, nothing prescriptive\",\n  \"nyc\": {\n    \"check-coverage\": true,\n    \"per-file\": true,\n    \"lines\": 99,\n    \"statements\": 99,\n    \"functions\": 99,\n    \"branches\": 99,\n    \"include\": [\n      \"src/**/*.js\"\n    ],\n    \"exclude\": [\n      \"src/**/*.spec.js\"\n    ],\n    \"ignore-class-method\": \"methodToIgnore\",\n    \"reporter\": [\n      \"lcov\",\n      \"text-summary\"\n    ],\n    \"require\": [\n      \"./test/helpers/some-helper.js\"\n    ],\n    \"extension\": [\n      \".jsx\"\n    ],\n    \"cache\": true,\n    \"all\": true,\n    \"temp-directory\": \"./alternative-tmp\",\n    \"report-dir\": \"./alternative\"\n  }\n}\n```\n\n### Publish, and reuse, your nyc configuration\n\nnyc allows you to inherit other configurations using the key `extends`. As an example,\nan alternative way to configure nyc for `babel-plugin-istanbul` would be to use the\n[@istanbuljs/nyc-config-babel preset](https://www.npmjs.com/package/@istanbuljs/nyc-config-babel):\n\n```json\n{\n  \"nyc\": {\n    \"extends\": \"@istanbuljs/nyc-config-babel\"\n  }\n}\n```\n\nTo publish and resuse your own `nyc` configuration, simply create an npm module that\nexports an `index.json` with your `nyc` config.\n\n## High and low watermarks\n\nSeveral of the coverage reporters supported by nyc display special information\nfor high and low watermarks:\n\n* high-watermarks represent healthy test coverage (in many reports\n  this is represented with green highlighting).\n* low-watermarks represent sub-optimal coverage levels (in many reports\n  this is represented with red highlighting).\n\nYou can specify custom high and low watermarks in nyc's configuration:\n\n```json\n{\n  \"nyc\": {\n    \"watermarks\": {\n      \"lines\": [80, 95],\n      \"functions\": [80, 95],\n      \"branches\": [80, 95],\n      \"statements\": [80, 95]\n    }\n  }\n}\n```\n\n## Parsing Hints (Ignoring Lines)\n\nThere may be some sections of your codebase that you wish to purposefully\nexclude from coverage tracking, to do so you can use the following parsing\nhints:\n\n* `/* istanbul ignore if */`: ignore the next if statement.\n* `/* istanbul ignore else */`: ignore the else portion of an if statement.\n* `/* istanbul ignore next */`: ignore the next _thing_ in the source-code (\n functions, if statements, classes, you name it).\n* `/* istanbul ignore file */`: ignore an entire source-file (this should be\n  placed at the top of the file).\n\n## Ignoring Methods\n\nThere may be some methods that you want to universally ignore out of your classes\nrather than having to ignore every instance of that method:\n\n```json\n{\n  \"nyc\": {\n    \"ignore-class-method\": \"render\"\n  }\n}\n```\n\n## Integrating with coveralls\n\n[coveralls.io](https://coveralls.io) is a great tool for adding\ncoverage reports to your GitHub project. Here's how to get nyc\nintegrated with coveralls and travis-ci.org:\n\n1. add the coveralls and nyc dependencies to your module:\n\n  ```shell\n  npm install coveralls nyc --save-dev\n  ```\n\n2. update the scripts in your package.json to include these bins:\n\n  ```json\n  {\n     \"scripts\": {\n       \"test\": \"nyc mocha\",\n       \"coverage\": \"nyc report --reporter=text-lcov | coveralls\"\n     }\n  }\n  ```\n\n3. For private repos, add the environment variable `COVERALLS_REPO_TOKEN` to travis.\n\n4. add the following to your `.travis.yml`:\n\n  ```yaml\n  after_success: npm run coverage\n  ```\n\nThat's all there is to it!\n\n> Note: by default coveralls.io adds comments to pull-requests on GitHub, this can feel intrusive. To disable this, click on your repo on coveralls.io and uncheck `LEAVE COMMENTS?`.\n\n## Integrating with codecov\n\n`nyc npm test && nyc report --reporter=text-lcov > coverage.lcov && codecov`\n\n[codecov](https://codecov.io/) is a great tool for adding\ncoverage reports to your GitHub project, even viewing them inline on GitHub with a browser extension:\n\nHere's how to get `nyc` integrated with codecov and travis-ci.org:\n\n1. add the codecov and nyc dependencies to your module:\n\n  ```shell\n  npm install codecov nyc --save-dev\n  ```\n\n2. update the scripts in your package.json to include these bins:\n\n  ```json\n  {\n     \"scripts\": {\n       \"test\": \"nyc tap ./test/*.js\",\n       \"coverage\": \"nyc report --reporter=text-lcov > coverage.lcov && codecov\"\n     }\n  }\n  ```\n\n3. For private repos, add the environment variable `CODECOV_TOKEN` to travis.\n\n4. add the following to your `.travis.yml`:\n\n  ```yaml\n  after_success: npm run coverage\n  ```\n\nThat's all there is to it!\n\n## Integrating with TAP formatters\n\nMany testing frameworks (Mocha, Tape, Tap, etc.) can produce [TAP](https://en.wikipedia.org/wiki/Test_Anything_Protocol) output. [tap-nyc](https://github.com/MegaArman/tap-nyc) is a TAP formatter designed to look nice with nyc.\n\n## More tutorials\n\nYou can find more tutorials at http://istanbul.js.org/docs/tutorials\n\n## Other advanced features\n\nTake a look at http://istanbul.js.org/docs/advanced/ and please feel free to [contribute documentation](https://github.com/istanbuljs/istanbuljs.github.io/tree/development/content).\n",
  "readmeFilename": "README.md",
  "gitHead": "570a08aaf9221d4c62eb0027ab16948223aab2d8",
  "bugs": {
    "url": "https://github.com/istanbuljs/nyc/issues"
  },
  "homepage": "https://github.com/istanbuljs/nyc#readme",
  "bundleDependencies": [
    "archy",
    "arrify",
    "caching-transform",
    "convert-source-map",
    "debug-log",
    "default-require-extensions",
    "find-cache-dir",
    "find-up",
    "foreground-child",
    "glob",
    "istanbul-lib-coverage",
    "istanbul-lib-hook",
    "istanbul-lib-instrument",
    "istanbul-lib-report",
    "istanbul-lib-source-maps",
    "istanbul-reports",
    "md5-hex",
    "merge-source-map",
    "micromatch",
    "mkdirp",
    "resolve-from",
    "rimraf",
    "signal-exit",
    "spawn-wrap",
    "test-exclude",
    "yargs",
    "yargs-parser"
  ],
  "_id": "nyc@11.9.0",
  "_npmVersion": "6.1.0-next.0",
  "_nodeVersion": "8.4.0",
  "_npmUser": {
    "name": "bcoe",
    "email": "ben@npmjs.com"
  },
  "dist": {
    "integrity": "sha512-w8OdJAhXL5izerzZMdqzYKMj/pgHJyY3qEPYBjLLxrhcVoHEY9pU5ENIiZyCgG9OR7x3VcUMoD40o6PtVpfR4g==",
    "shasum": "4106e89e8fbe73623a1fc8b6ecb7abaa271ae1e4",
    "tarball": "https://registry.npmjs.org/nyc/-/nyc-11.9.0.tgz",
    "fileCount": 4743,
    "unpackedSize": 14135183,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbEEaeCRA9TVsSAnZWagAAUYEQAIGBpUtRj8NX5AC5pBzC\nu1+Xsl6FvxjL5Jw4IB+9IuJpKtFXzLfHAGPK2efquV6/rj5MVs+/MLFQqHRV\nxeLzLxCcOykVpkRbBlPhCatlRcrrq/JRdj8ePLvIbsO1n/KcmJ+0Q2VAZnOo\nvV3K5KdrNqiRbUSHfNdCDNuZoKvrWG1l2Pfzmd7G5Vey/BytvWS18DFO9kmD\nIJE38DQeWpOnKVL/ih8Uac9miTsKD9AG9+D30l3O3JKIqyqL+wjbn6XxD3bx\nYewqjV7spyeWE1Hz4nuSTwLhgY5BeGGUOa6WOFZ9qHvnIMTOXxlSGC/kkJ5L\nX9aPVlX6I/LATEqB5UZQIciZFz0vfVsJANcz/uo5BvVM2jjuTO6KHqYaDseZ\nbtMUjW7TorXsQXEN5KLt9/SY6DDhXa65Rp0FzbMACinZdTBp5HROz6LHv72i\nkWdWVUsvarArJ3PE39dOY4Pj7e9QXA/JoqvO3xWXiknpvglM6r9qVT7cAEK4\ncRUJui21sm8MjhVM/i4QfE4RYGda0ez9u7kMn686P4ERTxuRakZjKOPhHu8k\neeHItlhL/obkAuqaL4gpjrKm6RTU1arEJ3bUfSWGv5WSdYAfIYUQ0LL89xrd\n6ZcTprlDoFq7uyVbFOVdHl21bOCa+OIaGZdUHW6ggbwHjreQ336LtF3DfoOA\nNGUF\r\n=OoLf\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "maintainers": [
    {
      "email": "ben@npmjs.com",
      "name": "bcoe"
    },
    {
      "email": "i@izs.me",
      "name": "isaacs"
    }
  ],
  "directories": {},
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/nyc_11.9.0_1527793308262_0.7341710208282795"
  },
  "_hasShrinkwrap": false,
  "_shasum": "4106e89e8fbe73623a1fc8b6ecb7abaa271ae1e4",
  "_resolved": "https://registry.npmjs.org/nyc/-/nyc-11.9.0.tgz",
  "_from": "nyc@>=11.2.1 <12.0.0"
}
